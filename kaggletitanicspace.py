# -*- coding: utf-8 -*-
"""KaggleTitanicSpace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jPeH5lM9p3TnOki-dtjytrWiRAZ3wLU5
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
import tensorflow as tf
import tensorflow_decision_forests as tfdf
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

traindata=pd.read_csv('/content/train.csv')
testdata=pd.read_csv('/content/test.csv')
traindata

traindata.info()

traindata.isna().sum()

def datapreprocess (data):
  data=data.drop(['Name'],axis=1)
  #splitting the cabin column
  data['cab_deck']=data['Cabin'].str.split('/',expand=True)[0]
  data['cab_num']=data['Cabin'].str.split('/',expand=True)[1]
  data['cab_side']=data['Cabin'].str.split('/',expand=True)[2]
  data['cab_num']=data['cab_num'].astype(float)
  data=data.drop(['Cabin'],axis=1)

  #filling the missing values
  numerical_cols=['Age','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck','cab_num']
  categorical_cols=['HomePlanet','CryoSleep','Destination','VIP','cab_deck','cab_side']
  data[numerical_cols]=data[numerical_cols].fillna(data[numerical_cols].mean())
  data[categorical_cols]=data[categorical_cols].fillna(data[categorical_cols].mode().iloc[0])
  #dummies for the categorical columns
  data= pd.get_dummies(data, columns=categorical_cols, drop_first=True)
  #data['PassengerId']=data['PassengerId'].astype(float)
  return data

traindata=datapreprocess(traindata)
testdata=datapreprocess(testdata)

traindata.isna().sum()

X=traindata.drop(['Transported'],axis=1)
y=traindata['Transported']

x_test,x_train,y_test,y_train=train_test_split(X,y,test_size=0.2,random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(x_train)
X_val_scaled = scaler.transform(x_test)
X_test_scaled = scaler.transform(testdata)

# Train and Evaluate Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)
y_pred_linear = linear_model.predict(X_val_scaled)

print("Linear Regression Model:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_linear)}")
print(f"R^2 Score: {r2_score(y_test, y_pred_linear)}")

# Train and Evaluate XGBoost Regressor
xgb_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)
xgb_model.fit(X_train_scaled, y_train)
y_pred_xgb = xgb_model.predict(X_val_scaled)

print("\nXGBoost Regressor Model:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_xgb)}")
print(f"R^2 Score: {r2_score(y_test, y_pred_xgb)}")

RFC_model = RandomForestClassifier(n_estimators=100, random_state=42)
RFC_model.fit(X_train_scaled, y_train)

# Make predictions on validation set
y_pred_RFC = RFC_model.predict(X_val_scaled)
val_accuracy = accuracy_score(y_test, y_pred_RFC)
print(f"Accuracy Score: {val_accuracy}") # Use accuracy_score for classification

# Optionally, you can also look at other classification metrics
from sklearn.metrics import precision_score, recall_score, f1_score
print(f"Precision: {precision_score(y_test, y_pred_RFC)}")
print(f"Recall: {recall_score(y_test, y_pred_RFC)}")
print(f"F1-Score: {f1_score(y_test, y_pred_RFC)}")

test_predictions = RFC_model.predict(X_test_scaled)

# Prepare submission file
submission = pd.DataFrame({
    'PassengerId': testdata['PassengerId'],  # Use the original PassengerId from test data
    'Transported': test_predictions
})

# Ensure correct data types
submission['PassengerId'] = submission['PassengerId'].astype(str)  # Keep PassengerId as string
submission['Transported'] = submission['Transported'].astype(bool)

# Verify that we have the correct number of predictions
assert len(submission) == len(testdata), "Mismatch in number of predictions"

# Save the submission file
submission.to_csv('submission.csv', index=False)

print("Submission file created. Please verify the following:")
print(f"Number of predictions: {len(submission)}")
print(submission['Transported'].value_counts(normalize=True))
print("\nFirst few rows of the submission file:")
print(submission.head())